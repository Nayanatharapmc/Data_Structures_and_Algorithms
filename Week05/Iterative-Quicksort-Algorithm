//Iterative quick-sort algorithm
#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>

using namespace std;
using namespace std::chrono;

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
  
/* This function is same in both iterative and recursive*/
int partition(vector<int>& arr, int l, int h)
{
    int x = arr[h];
    int i = (l - 1);
  
    for (int j = l; j <= h - 1; j++) {
        if (arr[j] <= x) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[h]);
    return (i + 1);
}
  
void quickSortIterative(vector<int>& arr, int l, int h)
{
    int stack[h - l + 1];
  
    // initialize top of stack
    int top = -1;
  
    // push initial values of l and h to stack
    stack[++top] = l;
    stack[++top] = h;
  
    // Keep popping from stack while is not empty
    while (top >= 0) {
        // Pop h and l
        h = stack[top--];
        l = stack[top--];
  
        // Set pivot element at its correct position
        // in sorted array
        int p = partition(arr, l, h);
  
        // If there are elements on left side of pivot,
        // then push left side to stack
        if (p - 1 > l) {
            stack[++top] = l;
            stack[++top] = p - 1;
        }
  
        // If there are elements on right side of pivot,
        // then push right side to stack
        if (p + 1 < h) {
            stack[++top] = p + 1;
            stack[++top] = h;
        }
    }
}

int main() {
    srand(time(nullptr)); // Initialize random seed

    int n;
    cout << "Enter size of the array: ";
    cin >> n;

    vector<int> arr(n);

    // Generate random array
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100; // random number between 0 and 99
    }

    auto start = high_resolution_clock::now(); // Start timer
    quickSortIterative(arr, 0, n-1);
    auto end = high_resolution_clock::now(); // End timer


    auto duration = duration_cast<microseconds>(end - start);
    cout << "Time taken by sorting function: " << duration.count() << " microseconds" << endl;

    return 0;
}
